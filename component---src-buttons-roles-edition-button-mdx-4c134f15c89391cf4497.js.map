{"version":3,"sources":["webpack:///../src/buttons/RolesEditionButton.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","RolesEditionButton","__position","__code","__scope","Playground","Props","isIconButton","isReadOnly","agents","id","specificAccessByAgent","roles","allRoles","value","label","allPermissions","resourceRolesPermissionsMapping","admin","editor","viewer","defaultRole","defaultAccessScope","onConfirmChanges","alert","isMDXComponent"],"mappings":"8SAQaA,EAAe,QAAG,0OAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,MAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,qBAAmB,qBAE3B,8MAEA,kBACE,GAAM,SAAO,SAEf,YAAC,IAAK,CAACC,GAAIC,IAAoBF,QAAQ,UACvC,YAAC,IAAU,CAACG,WAAY,EAAGC,OAAQ,m1CAA65CC,SAAO,GACr8CN,QACAH,kBACAU,eACAC,UACAL,wBAAkB,gBAClBN,IAAa,EACbH,eAAY,GACXO,QAAQ,cACb,YAAC,IAAkB,CAACQ,cAAc,EAAOC,YAAY,EAAOC,OAAQ,CAAC,CAC/DC,GAAI,yBACH,CACDA,GAAI,uBACH,CACDA,GAAI,yBACH,CACDA,GAAI,yBACFC,sBAAuB,CAAC,CAC1BD,GAAI,wBACJE,MAAO,SACN,CACDF,GAAI,uBACJE,MAAO,WACLC,SAAU,CAAC,CACbC,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,QACPC,MAAO,UACLC,eAAgB,CAClB,OAAU,SACV,eAAkB,OAClB,gBAAmB,mBACnB,OAAU,SACV,KAAQ,OACR,gBAAmB,iCACnB,YAAe,gBACdC,gCAAiC,CAClCC,MAAO,CAAC,SAAU,iBAAkB,kBAAmB,SAAU,OAAQ,kBAAmB,eAC5FC,OAAQ,CAAC,iBAAkB,SAAU,OAAQ,kBAAmB,eAChEC,OAAQ,CAAC,OAAQ,kBAAmB,gBACnCC,YAAY,SAASC,mBAAmB,eAAeC,iBAAkB,kBAAMC,MAAM,qBAAqBzB,QAAQ,8BAI1H,wOAEDH,EAAW6B,gBAAiB","file":"component---src-buttons-roles-edition-button-mdx-4c134f15c89391cf4497.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/webapp-component-ui/webapp-component-ui/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { RolesEditionButton } from '@cosmotech/ui';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"edit-roles-button\"\n    }}>{`Edit Roles Button`}</h1>\n    <p>{`The aim of this component is to display an access sharing button.\nThis button will display a popup guiding users through adding and editing roles for given resource (e.g. scenario)`}</p>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={RolesEditionButton} mdxType=\"Props\" />\n    <Playground __position={1} __code={'<RolesEditionButton\\n  isIconButton={false}\\n  isReadOnly={false}\\n  agents={[\\n    { id: \\'alice@somecompany.com\\' },\\n    { id: \\'bob@somecompany.com\\' },\\n    { id: \\'clara@somecompany.com\\' },\\n    { id: \\'tony@somecompany.com\\' },\\n  ]}\\n  specificAccessByAgent={[\\n    { id: \\'alice@somecompany.com\\', roles: \\'admin\\' },\\n    { id: \\'tony@somecompany.com\\', roles: \\'editor\\' },\\n  ]}\\n  allRoles={[\\n    {\\n      value: \\'viewer\\',\\n      label: \\'Viewer\\',\\n    },\\n    {\\n      value: \\'editor\\',\\n      label: \\'Editor\\',\\n    },\\n    {\\n      value: \\'admin\\',\\n      label: \\'Admin\\',\\n    },\\n  ]}\\n  allPermissions={{\\n    delete: \\'Delete\\',\\n    editParameters: \\'Edit\\',\\n    editPermissions: \\'Edit permissions\\',\\n    rename: \\'Rename\\',\\n    view: \\'View\\',\\n    viewPermissions: \\\"See other people\\'s permissions\\\",\\n    viewResults: \\'View results\\',\\n  }}\\n  resourceRolesPermissionsMapping={{\\n    admin: [\\n      \\'delete\\',\\n      \\'editParameters\\',\\n      \\'editPermissions\\',\\n      \\'rename\\',\\n      \\'view\\',\\n      \\'viewPermissions\\',\\n      \\'viewResults\\',\\n    ],\\n    editor: [\\n      \\'editParameters\\',\\n      \\'rename\\',\\n      \\'view\\',\\n      \\'viewPermissions\\',\\n      \\'viewResults\\',\\n    ],\\n    viewer: [\\'view\\', \\'viewPermissions\\', \\'viewResults\\'],\\n  }}\\n  defaultRole=\\\"viewer\\\"\\n  defaultAccessScope=\\\"My workspace\\\"\\n  onConfirmChanges={() => alert(\\'Scenario sharing\\')}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      RolesEditionButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <RolesEditionButton isIconButton={false} isReadOnly={false} agents={[{\n        id: 'alice@somecompany.com'\n      }, {\n        id: 'bob@somecompany.com'\n      }, {\n        id: 'clara@somecompany.com'\n      }, {\n        id: 'tony@somecompany.com'\n      }]} specificAccessByAgent={[{\n        id: 'alice@somecompany.com',\n        roles: 'admin'\n      }, {\n        id: 'tony@somecompany.com',\n        roles: 'editor'\n      }]} allRoles={[{\n        value: \"viewer\",\n        label: \"Viewer\"\n      }, {\n        value: \"editor\",\n        label: \"Editor\"\n      }, {\n        value: \"admin\",\n        label: \"Admin\"\n      }]} allPermissions={{\n        \"delete\": \"Delete\",\n        \"editParameters\": \"Edit\",\n        \"editPermissions\": \"Edit permissions\",\n        \"rename\": \"Rename\",\n        \"view\": \"View\",\n        \"viewPermissions\": \"See other people's permissions\",\n        \"viewResults\": \"View results\"\n      }} resourceRolesPermissionsMapping={{\n        admin: [\"delete\", \"editParameters\", \"editPermissions\", \"rename\", \"view\", \"viewPermissions\", \"viewResults\"],\n        editor: [\"editParameters\", \"rename\", \"view\", \"viewPermissions\", \"viewResults\"],\n        viewer: [\"view\", \"viewPermissions\", \"viewResults\"]\n      }} defaultRole='viewer' defaultAccessScope='My workspace' onConfirmChanges={() => alert('Scenario sharing')} mdxType=\"RolesEditionButton\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}